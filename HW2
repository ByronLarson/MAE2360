HW 2
10/20/21
Section 003
Larson, Byron
7148



Problem 1

Solve the cubic equation:

#include <iostream>
#include <math.h>

int main()
{
    int a,b,c,d;
    double p,q,r,x,y;
    printf("Coefficient of a:");
    scanf("%d",&a);
    
    printf("Coefficient of b:");
    scanf("%d",&b);
    
    printf("Coefficient of c:");
    scanf("%d",&c);
    
    printf("Coefficient of d:");
    scanf("%d",&d);
    
    q=(p*p*p)+((b*c)-(3*a*d)/(6*a*a));
    
    p=-b/(3*a);
    
    r=c/(3*a);
    
    x=pow((q+(pow((pow(q,2)+pow((r-pow(p,2)),3)),1/2))),1/3)+pow((q-(pow((pow(q,2)+pow((r-pow(p,2)),3)),1/2))),1/3)+p;
    
    
    printf("x=%1f",x);
    
    
    return 0;
}


Problem 2
x sin x = ex - x sin (x2),
by the Newton-Raphson method in the interval, [-2, 2].

#include <stdio.h> 
#include <math.h> 
#define EPS 1.0e-10 
 
double f(double x) 
    { 
    return ((x*sin(x))-exp(x)+(x*sin(x*x))); 
    } 
/*fp is the derivitive of f*/
    double fp(double x) 
    { 
      return ((x*cos(x))+sin(x)-exp(x)+(2*x*x*cos(x*x))+sin(x*x)); 
    } 
 
    double newton(double x) 
    { 
      return x - f(x)/fp(x); 
    } 
 
int main() 
{ 
  double x1, x2; 
  int i; 
 
  printf("Enter initial guess  ="); 
  scanf("%lf", &x1); 
 
  if (fp(x1)==0.0) { 
    printf("No convergence.\n"); 
    return 0; 
  } 
 
  for (i=0;i<100;i++) 
  { 
    x2=newton(x1); 
    if (fabs(x1-x2)< EPS) break; 
    x1=x2; 
  } 
 
  printf("iteration = %d\n", i);  
  printf("x= %lf\n", x1); 
  return 0;
}


Problem 3
ex - 3 x = 0,
using the bisection method.

/* Compute the square root of exp(x)-3*x */ 
#include <stdio.h> 
#include <math.h> 
#define EPS 1.0e-10 
#define N 100 
 
double f(double x) 
    { 
    return exp(x)-3*x; 
    } 
 
/* start of main */ 
int main() 
    { 
double x1, x2, x3; 
int count; 

/* for exp(x)-3*x guess between 0.5 and 0.8 or 1.4 and 1.8 */ 

printf("Enter xleft and xright separated by space ="); 
scanf("%lf %lf", &x1, &x2); 
 
/* sanity check */ 
if (f(x1)*f(x2)>0) {printf("Invalid x1 and x2 !\n"); return 0;} 
 
/* bisection start */ 
for (count=0;count< N; count++) 
 { 
 x3= (x1+x2)/2.0; 
 if (f(x1)*f(x3)<0 ) x2=x3; else x1=x3; 
 if ( f(x3)==0.0 || fabs(x1-x2)< EPS ) break; 
} 
 
printf("iteration = %d\n", count); 
printf("x= %lf\n", x1); 
return 0; 
}  


Problem 4
Solve the following 10 simultaneous equations by the Gauss-Jordan elimination method.

#include<stdio.h>
int main()
{
    int i,j,k,n=10;
    
    float x[10];
    
    float a[10][10]={
    {3.55618, 5.87317, 7.84934, 5.6951, 3.84642, 9.15038, -1.68539, 5.03067, 7.63384, -1.75626},
    {-4.82893, 8.38177, -0.301221, 5.10182, -4.1169,-6.09145, -3.95675, -2.33365, 1.3969, 6.54555},
    {-7.64196, 5.66605,3.20481, 1.55619, -1.19814, 9.79288, 5.35547, 5.86109, 4.95544, -9.35749},
    {-2.95914, -9.16958,7.3216, 2.39876, -8.1302, -7.55135, -2.37718, 7.29694, 5.9867, 8.5401},
    {-8.42043, -0.369407, -5.4102, -8.00545, 9.22153, 3.96454, 5.38499, 0.438365, 0.419677, 4.17166},
    {6.02952, 4.57728, 5.46424, 3.52915, -1.01135, -3.74686,8.14264, -8.86961, -2.88114, 1.29821},
    {0.519819, -6.16655, 1.13216, 2.75811, -1.05975, 4.20286, -3.45764, 0.763558, -0.281287, -9.76168},
    {5.15737, -9.67481, 9.29904, -3.93334, 9.12785, -4.25208, -6.1652, 2.5375, 0.139195, 2.00106},
    {-4.30784, 1.40711, -6.97966, -9.29715, 5.17234, 2.42634, 1.88818, -2.05526, -3.7679, 3.3708},
    {-4.65418, 7.18118, 6.51338, 3.13249, 0.188456, -16.85599, 7.21435, -2.93417, 1.06061, 1.10807}};
    
    float c[10]={-1.92193, -2.35262, 2.27709, -2.67493, 1.84756, 4.154126, -0.93387, -1.28356, -3.46841, -2.61529};
    
    /* Find the "xn" values from the diagonal matrix */
    for(i=0; i<n; i++)
        {
        for(j=0; j<n; j++)
            {
                if(i!=j)
                {
                    float t=a[i][j]/a[j][j];
                    
                        for(k=0; k<n; k++)
                            {
                                a[i][k]=a[i][k]-t*a[j][k];
                            }
                }
            }
        }
        
    printf("\nThe solutions are: \n");
    
    for(i=0; i<n; i++)
        {
            x[i]=c[i]/a[i][i];
            printf("\n x%d=%f\n",i+1,x[i]);
        }
        return(0);
}

Problem 5
Solve the following set of nonlinear equations by the Gauss-Seidel method.

#include <stdio.h> 
#include <math.h>

int main() 
{ 
double x, y, z; 
int i,n; 
 
x=y=z=1; 
 
printf("Enter # of iteration = "); 
scanf("%d", &n); 
 
for (i=0;i<n;i++) 
{ 
x = (3+0.12*z-exp(x)*cos(y))/27.0; 
y = (6+0.2*pow(x,2)-3*x*z)/37.0; 
z = (-4+0.2*y*sin(x)-pow(x,2))/29.0; 
} 
 
printf(" x = %lf\n y = %lf\n z = %lf\n", x,y,z); 
return 0; 
}  

Problem 6
Numerically compute the velocity from the table above using the central difference scheme


Problem 7
Evaluate analytically:

Write a C program to numerically integrate the above using the Simpson rule.


